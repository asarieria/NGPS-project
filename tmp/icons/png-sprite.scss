// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$add-img-name: 'add_img';
$add-img-x: 36px;
$add-img-y: 0px;
$add-img-offset-x: -36px;
$add-img-offset-y: 0px;
$add-img-width: 32px;
$add-img-height: 32px;
$add-img-total-width: 68px;
$add-img-total-height: 66px;
$add-img-image: 'sprite.png';
$add-img: (36px, 0px, -36px, 0px, 32px, 32px, 68px, 66px, 'sprite.png', 'add_img', );
$case-name: 'case';
$case-x: 0px;
$case-y: 0px;
$case-offset-x: 0px;
$case-offset-y: 0px;
$case-width: 36px;
$case-height: 34px;
$case-total-width: 68px;
$case-total-height: 66px;
$case-image: 'sprite.png';
$case: (0px, 0px, 0px, 0px, 36px, 34px, 68px, 66px, 'sprite.png', 'case', );
$file-name: 'file';
$file-x: 0px;
$file-y: 34px;
$file-offset-x: 0px;
$file-offset-y: -34px;
$file-width: 26px;
$file-height: 32px;
$file-total-width: 68px;
$file-total-height: 66px;
$file-image: 'sprite.png';
$file: (0px, 34px, 0px, -34px, 26px, 32px, 68px, 66px, 'sprite.png', 'file', );
$lock-close-name: 'lock-close';
$lock-close-x: 26px;
$lock-close-y: 34px;
$lock-close-offset-x: -26px;
$lock-close-offset-y: -34px;
$lock-close-width: 20px;
$lock-close-height: 32px;
$lock-close-total-width: 68px;
$lock-close-total-height: 66px;
$lock-close-image: 'sprite.png';
$lock-close: (26px, 34px, -26px, -34px, 20px, 32px, 68px, 66px, 'sprite.png', 'lock-close', );
$lock-open-name: 'lock-open';
$lock-open-x: 46px;
$lock-open-y: 34px;
$lock-open-offset-x: -46px;
$lock-open-offset-y: -34px;
$lock-open-width: 20px;
$lock-open-height: 32px;
$lock-open-total-width: 68px;
$lock-open-total-height: 66px;
$lock-open-image: 'sprite.png';
$lock-open: (46px, 34px, -46px, -34px, 20px, 32px, 68px, 66px, 'sprite.png', 'lock-open', );
$spritesheet-width: 68px;
$spritesheet-height: 66px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($add-img, $case, $file, $lock-close, $lock-open, );
$spritesheet: (68px, 66px, 'sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
